plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.5.15'
    implementation 'ch.qos.logback:logback-core:1.5.15'
    implementation 'org.slf4j:slf4j-api:2.1.0-alpha1'
    implementation 'org.seleniumhq.selenium:selenium-java:4.27.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'io.javalin:javalin:6.4.0'
    implementation 'org.postgresql:postgresql:42.7.5'
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}


shadowJar {
    manifest {
        attributes(
            'Main-Class': 'org.example.App' // Replace with your main class
        )
    }
}

// jar {
//     manifest {
//         attributes 'Main-Class': 'org.example.App'
//     }
// }

graalvmNative {
    agent {
        defaultMode = "standard"
        enabled = true
        modes {
            standard {}
        }
    }
    binaries.all {
        buildArgs.add("--enable-url-protocols=http")
//        resources.autodetect()
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events("passed", "failed")
        showStandardStreams = true
        exceptionFormat = "full"
    }
}
